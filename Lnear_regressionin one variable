import numpy as np

def load_data():
# X rows: [sqft]
    x = np.array([0.1400,0.1600,0.1700,0.1875,0.1100,0.1550,0.2350,0.2450,0.1425,0.1700])
    y = np.array([24.5000, 31.2000, 27.9000, 30.8000, 19.9000, 21.9000, 40.5000, 32.4000, 31.9000, 25.5000])
    return x,y

def gradient(x,y,w,b):
    m=x.shape[0]
    derivative_w=0
    derivative_b=0
    for i in range(m):
        predicted=w*x[i]+b
        derivative_w+=(predicted-y[i])*x[i]
        derivative_b+=(predicted-y[i])
    derivative_w==(1/m)*derivative_w
    derivative_b==(1/m)*derivative_b
    return derivative_w,derivative_b

def gradient_descent(x,y,alpha,iterations,temp_w,temp_b):
    w=temp_w
    b=temp_b
    
    for i in range(iterations):
        derivative_w,derivative_b=gradient(x,y,w,b)
        w-=alpha*derivative_w
        b-=alpha*derivative_b
    return w,b

def prediction(x,w,b):
    predicted=w*x+b
    return predicted

x_train , y_train = load_data()

tmp_w = 0.0  
tmp_b = 0.0  
alpha = 0.01     
iterations = 1500  

w_final,b_final = gradient_descent(x_train, y_train, alpha, iterations, tmp_w, tmp_b)

pop1 = 3.5
pop2 = 7.0
print(f"the price of your house {(prediction(.4000,w_final,b_final)*10000)}")
